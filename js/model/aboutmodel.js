/* imports */
import Model from './model.js';

export default class AboutModel extends Model
{
    constructor( )
    {
        super();
        /* load env properties into memory */
        this.credits    = env?.credits    ?? null;
        this.url        = env?.sourceurl  ?? null;
        this.author     = env?.author     ?? null;
        this.dedication = env?.dedication ?? null;
        this.changelog  = env?.changelog  ?? null;

        /* storage size in bytes */
        this.cachesize  = null;
        this.lssize     = null;

        /* privacy block definition */
        this.privacy    = [
            { header: 'summary' },
            { name: 'profile information', text: 'name and avatar are saved on the server and are only shared with other players you have played with' },
            { name: 'cryptographic keys', text: 'randomized keys are saved to your device and are only used to secure communication with the server' },
            { name: 'sharing', text: 'no information is shared with third parties' },
            { header: 'generated data' },
            { name: 'passkey', disclaimer: 'WebAuthn credential', text: 'random key generated by your device that never leaves your device and can only be accessed with your biometrics' },
            { name: 'session cookie', disclaimer: 'short-term cookie', text: 'random browser cookie temporarily saved to your device to help the server recognize you during a visit' },
            { name: 'device cookie', disclaimer: 'long-term cookie', text: 'random browser cookie saved to your device to help the server securely recognize you between visits' },
            { name: 'access logs', disclaimer: 'apache access logs', text: 'cribb.app retains 60 days of anonymous ip and browser information from visitors to help maintain service' },
            { header: 'retention' },
            { name: 'forget identity', text: 'use the "forget identity..." link in the identity menu to logout and delete all cribb.app access cookies on your device' }
        ];
    }

    /* scan localstorage space */
    lsSize = () => Object.values( localStorage )
        .map( x =>
        {
            const amount = x.length * 2;
            if ( !isNaN( amount ) ) { return amount }
        } )
        .reduce( ( acc, n ) => acc + ( n || 0 ), 0 );

}
